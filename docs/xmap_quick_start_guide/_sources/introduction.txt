Introduction
============

Intended Audience
-----------------

This document is intended for those users who would like to interface
to the XIA xMAP hardware using the Handel driver library. Users of the
Handel driver library should be reasonably familiar with the C
programming language and this document assumes the same.

Conventions
-----------

As each function in Handel is discussed for the first time, look for
the API note for a detailed description of the routine.

Sample Code
-----------

The Quick Start Guide includes many inline code examples to illustrate
how specific features are used. In addition to the inline code
examples, three sample applications are included with Handel:
hqsg-xmap.c, hqsg-xmap-preset.c and hqsg-xmap-mapping.c. Precompiled
versions of the applications (for Windows) are also packaged with
Handel.

Each application requires a file called :file:`xmap_reset_std.ini` be
present in the same directory as the application. A sample file is
included in the distribution, though it will probably need some
modifications to run with an arbitrary xMAP system.

hqsg-xmap
^^^^^^^^^

This application walks through all of the steps required to acquire a
single MCA histogram with 5 seconds worth of data. This is the
simplest example and shows how to use basic Handel from start to
finish.

hqsg-xmap-preset
^^^^^^^^^^^^^^^^

Preset runs are an important component to most non-mapping xMAP
applications. This example shows how to setup a preset run and poll
waiting for the run to complete.

hqsg-xmap-mapping
^^^^^^^^^^^^^^^^^

Mapping applications introduce new terminology and uses of Handel;
this sample shows how to configure an xMAP module and collect a few
buffers worth of data. For a real mapping application, the pixel
advance would occur using either a GATE or SYNC input. Unfortunately,
configuring GATE or SYNC would make the sample code unnecessarily
complicated, in addition to requiring a valid GATE/SYNC signal be
present simply to run the sample. Instead we use the manual pixel
advance feature on the xMAP running in a separate thread to simulate
the normal pixel advance. Please keep this caveat in mind when reading
the sample code.

Understanding Handel
--------------------

Header Files
^^^^^^^^^^^^

Before introducing the details of programming with the Handel API, it
is important to discuss the relevant header files and other external
details related to Handel. All code intending to call a routine in
Handel needs to include the file :file:`inc/handel.h` as a header. To
gain access to the constants used to define the various logging
levels, the file :file:`inc/md_generic.h` must be included; additional
constants (preset run types, mapping mode controls, etc.) are located
in :file:`inc/handel_constants.h`. The last header that should be
included is :file:`inc/handel_errors.h`, which contains all of the
error codes returned by Handel.

Error Handling
^^^^^^^^^^^^^^

A good programming practice with Handel is to compare the returned
status value with :const:`XIA_SUCCESS` -- defined in
:file:`handel_errors.h` -- and then process any returned errors before
proceeding. All Handel routines (except for some of the debugging
routines) return an integer value indicating success or failure. While
not discussed in great detail in this document, Handel does provide a
comprehensive logging and error reporting mechanism that allows an
error to be traced back to a specific line of code in Handel.

Thread Safety
^^^^^^^^^^^^^

Handel is not thread-safe. It is the responsibility of any application
making Handel calls to ensure that only one thread is allowed to
access Handel at a time. For an example of how to protect access to
Handel, see the hqsq-xmap-mapping.c sample code.


.ini Files
^^^^^^^^^^

The last required file external to the actual Handel source code is an
initialization, or ".ini" file. The .ini file defines the setup of
your system by breaking the configuration down into the following
categories: detector (*[detector definitions]*), firmware (*[firmware
definitions]*), hardware (*[module definitions]*) and acquisition
values (*[default definitions]* [#]_). Each category in the .ini file
contains a series of blocks, surrounded by a set of ``START`` /
``END`` delimiters. Each block represents one instance of the logical
type associated with the category. For instance, each block in
*[detector definitions]* represents a physical detector with some
number of elements. Within each block is a series of key-value pairs
used to define the configuration.

.. note::

   XIA provides a tool, the *Configuration Wizard*, as part of the
   xManager application to generate .ini files based on information
   about your setup. The *Configuration Wizard* is a great way to
   generate an .ini file, but understanding the specific information
   stored in the .ini file is essential for most developers who use
   Handel.


[detector definitions]
""""""""""""""""""""""

Each block in this section is used to define one physical detector
made up of 1..N channels.

alias
    Human-readable string naming this detector. Other
    sections, such as *[module definitions]*, that need to reference the
    detector will do so using this string.

number_of_channels
    An integer describing the number of elements
    in your detector. If this value is set to ``N``, the strings
    ``{alias}:{0}`` through ``{alias}:{N - 1}`` will be available to map
    detector elements to hardware channels in the *[module
    definitions]* section.

type
    The detector type. Handel currently supports the strings
    ``reset`` and ``rc_feedback`` detectors and uses the specified
    type to pick the right firmware to download to the xMAP.

type_value
    For ``reset`` detectors, a double defining the reset
    delay time of the preamplifier(s) in microseconds. For
    ``rc_feedback`` detectors, a double defining the RC decay constant
    in microseconds.

channel{n}_gain
    The preamplifier gain, as a double, for detector element ``n``
    specified in mV/keV.

channel{n}_polarity
    A string defining the polarity of detector element ``n``. Allowed
    values are "+" or "pos" for a preamplifier whose pulses are
    positive and "-" or "neg" for one with negative pulses.

[firmware definitions]
""""""""""""""""""""""

Each block in this section defines a reference to a single FDD
file. FDD files, discussed in more detail below, are a flat file
containing logical sets of firmware for the xMAP hardware.

alias
    Human-readable string naming this FDD file. Other sections, such
    as *[module definitions]*, that need to reference the detector
    will do so using this string.

filename
    Valid path to the FDD file.

fdd_tmp_path
    Valid path to a temporary directory that your application has
    read/write permissions on. Handel will extract individual firmware
    files to this directory for subsequent download to the xMAP
    hardware.

.. _default-definitions-label:

[default definitions]
"""""""""""""""""""""

All of the acquisition values for each channel are stored in this
section. Handel auto-generates this section and the user is not
expected to modify it.

.. _module-definitions-label:

[module definitions]
""""""""""""""""""""

Each xMAP module is a system gets a separate block in this
section. The blocks map each xMAP channel to firmware, acquisition
values and a detector channel, and specify the hardware configuration
for each module.

alias
    Human-readable string naming this module.

module_type
    Always set to ``xmap``.

number_of_channels
    Always set to 4.

interface
    Always set to ``pxi``.

pci_bus / pci_slot 
    The PCI bus and slot that this module is connected to. To
    determine the bus value, you can use the Device Manager on
    Windows. As mentioned above, the *Configuration Wizard* in
    xManager will automatically generate an .ini with the correct bus
    and slot information for all of the xMAP modules attached to a
    computer.

channel{n}_alias
    Specifies a global, unique index for channel ``n``, where ``n``
    ranges from 0..3. This value is referenced throughout Handel as
    the ``detChan``.

channel{n}_detector
    Associates channel ``n``, where ``n`` ranges from 0..3, with a
    specific detector element. The detector element is referenced as
    ``{alias}:{m}`` where ``alias`` is a valid detector alias and
    ``m`` is a valid channel for ``alias``.

firmware_set_chan{n}
    Assigns an FDD file to module channel ``n``, where ``n`` ranges
    from 0..3. The FDD file is specified as a firmware alias.

FDD Files
^^^^^^^^^

The xMAP has 4 specialized processors that require programming after
the module has been powered up. The firmware used to program these
processors is collectively stored in a Firmware Definition Database
(FDD) file. XIA distributes current versions of the xMAP FDD files
with both Handel and xManager.

.. _section-detchans-label:

detChans
^^^^^^^^

Most routines in Handel accept a ``detChan`` integer as the first
argument. As discussed in :ref:`module-definitions-label`, each xMAP
channel in the system must be assigned a unique global ID. Handel .ini
files generated by the *Configuration Wizard* in xManager follow the
convention of assigning 0 to the first channel in the first module and
``N`` - 1, where ``N`` is the total number of channels in the system,
to the last channel in the last module.

Some routines in Handel -- mostly routines that set a value -- allow
the special ``detChan`` -1 to be passed as an argument. This special
value represents all of the ``detChan``\ s in the system and is
automatically created by Handel when it loads a new .ini file. When
calling routines like ``xiaSetAcquisitionValues()`` the -1 ``detChan``
is a convenient shortcut that eliminates the need to loop over all
channels.

Unfortunately, not all routines accept the -1 ``detChan``. The primary
situation where one is required to loop over all necessary channels is
when calling ``xiaBoardOperation()``, specifically with "apply" and
"mapping_pixel_next". Note though that both of these operations only
need to be called once per module using code like this [#]_:

.. admonition:: API

  .. c:function:: int xiaBoardOperation(int detChan, char *name, void *value)

     :param detChan: Single channel to perform the board operation
                     on. (-1 detChan is not allowed for this routine.)
     :param name: Board operation to perform.
     :param value: Appropriate typed value for the specified
                   operation. Must not be NULL, even if the operation
                   does not take a value.

     Performs the specified operation on a single-channel.

.. code-block:: c

   int i;
   int dummy = 0;

   for (i = 0; i < TOTAL_CHANNELS_IN_SYSTEM; i += 4) {
       CHECK_ERROR(xiaBoardOperation(i, "apply", &dummy));
   }

.. rubric:: Footnotes

.. [#] Unfortunately, the original name for acquisition values was
       "defaults".

.. [#] This code will be explained in more detail later. The key point
       in this example is that ``xiaBoardOperation`` is only being called
       once per module.
