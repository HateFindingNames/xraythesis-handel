import os
import os.path
import sys

import build_helpers.logic
import build_helpers.version


PROTOCOLS = [['epp',    'Include EPP driver'],
             ['serial', 'Include RS-232 driver'],
             ['usb',    'Include USB driver'],
             ['usb2',   'Include USB2 driver'],
             ['plx',    'Include PLX driver']]

DEVICES = [['saturn',  'Include Saturn support'],
           ['udxp',    'Include microDXP support'],
           ['udxps',   'Include microDXP setup support'],
           ['xmap',    'Include xMAP support'],
           ['stj',     'Include Stj support'],
           ['mercury', 'Include Mercury/Mercury-4 support']]

base_env = Environment(
    tools             = ['component_setup'],
    CPPPATH           = ['$MAIN_DIR/inc'],
    BUILD_SCONSCRIPTS = ['src/build.scons'],
    ENV               = {'PATH' : os.environ['PATH'],
                         'TMP'  : os.environ['TMP']})

# Allow customizing the staging directory
AddOption('--out', dest='out', action='store',
	  help='Override the build directory')
if GetOption('out'):
    base_env.Replace(DESTINATION_ROOT = GetOption('out'))
print 'building to', base_env.Dir('$DESTINATION_ROOT')

# Add external folders as Repository resource
base_env.Dir('redist').addRepository(base_env.Dir('../redist'))

# List of redist files
redist_files = []

# For official build use the mercurial id as version string.
# Otherwise use a development tag
DeclareBit("release", "Release build")
base_env.SetBitFromOption('release', False)

if base_env.Bit('release'):
    build_helpers.version.update_hg_changeset('tools/releaser/version.yml', 'tools/releaser/changeset.yml')
else:
    build_helpers.version.set_version_string('tools/releaser/changeset.yml', "development")
    
ver_cmd = base_env.Command('inc/xia_version.h',
                 ['tools/releaser/version.yml', 'tools/releaser/changeset.yml'],
                 build_helpers.version.generate)

base_env.Depends('src/xerxes.c', ['inc/xia_version.h'])
base_env.Depends('src/handel.c', ['inc/xia_version.h'])

# Command-line options to build the different products and protocols
AddTargetGroup('protocols', 'low level interface protocols')
for p in PROTOCOLS:
    DeclareBit(p[0], p[1])
    base_env.SetBitFromOption(p[0], True)

for d in DEVICES:
    DeclareBit(d[0], d[1])
    base_env.SetBitFromOption(d[0], True)

# Default to not build EPP and USB1 drivers
base_env.SetBitFromOption('epp', False)
base_env.SetBitFromOption('usb', False)

DeclareBit('analysis', 'Build with code analysis')
base_env.SetBitFromOption('analysis', False)

DeclareBit('alpha', 'Build Handel with support for the alpha udxp')
base_env.SetBitFromOption('alpha', False)

DeclareBit('vba', 'Build stdcall dlls for VB applications')
base_env.SetBitFromOption('vba', False)

# In some cases the need for xw could be determined automatically in
# update_environment, but customers need a way to disable it.
DeclareBit('xw', 'Build xw library')
base_env.SetBitFromOption('xw', True)

DeclareBit('x64', 'Build Handel for x64 platform')
base_env.SetBitFromOption('x64', False)

if base_env.Bit('x64'):
    print 'Setting target arch to amd64'
    base_env.Append(TARGET_ARCH = 'amd64')
else:
    print 'Setting target arch to x86'
    base_env.Append(TARGET_ARCH = 'x86')

build_helpers.logic.update_environment(base_env)

# Set options to build test programs
DeclareBit('tests', 'Build and run tests')
base_env.SetBitFromOption('tests', False)

if base_env.Bit('tests') :
    print 'Adding tests build.\n'
    base_env.Append(BUILD_SCONSCRIPTS=['tests/generic_c_tests/build.scons'])
    if base_env.Bit('xmap') :
        base_env.Append(BUILD_SCONSCRIPTS=['benchmarks/xmap/mapping/build.scons',
                         'tests/xmap_list_mode_stress_test/build.scons'])


# Set options to build sample program
DeclareBit('samples', 'Build samples')
base_env.SetBitFromOption('samples', False)

if base_env.Bit('samples') :
	base_env.Append(BUILD_SCONSCRIPTS=['docs/sample_code/build.scons'])

# Add COMMDRV libs
if base_env.Bit('serial'):
    print 'Adding serial build'
    serial_path = '$MAIN_DIR/redist/commdrv'
    if not base_env.Bit('x64'):
        base_env.Append(LIBPATH = [serial_path])
        redist_files += Glob('redist/drivers/rs232/*.dll')

# Add PLX libs
if base_env.Bit('plx'):
    print 'Adding plx build'
    plx_path = '$MAIN_DIR/redist/plxapi'
    if base_env.Bit('x64'):
        plx_path = os.path.join(plx_path, 'x64')
        redist_files += Glob('redist/plxapi/x64/*.dll')
    else:
        plx_path = os.path.join(plx_path, 'x86')
        redist_files += Glob('redist/plxapi/x86/*.dll')
    base_env.Append(LIBPATH = [plx_path])

# Add xw build_helpers
if base_env.Bit('xw'):
    print 'Adding xw build'
    base_env.Dir('ccomponents').addRepository(base_env.Dir('../ccomponents'))
    xw_path = '$MAIN_DIR/ccomponents/xia_xup_writer'
    base_env.Append(CPPPATH = [os.path.join(xw_path, 'src')])
    base_env.Append(BUILD_SCONSCRIPTS=['ccomponents/xia_assert/src/build.scons',
                                       'ccomponents/xia_xup_writer/src/build.scons'])

# Add EPP libs
if base_env.Bit('epp'):
    print 'Adding epp build'
    epp_path = '$MAIN_DIR/redist/dlportio'
    if not base_env.Bit('x64'):
        base_env.Append(LIBPATH = [epp_path])

# LINUX
linux_env = base_env.Clone(
    tools = ['target_platform_linux'])
linux_env.Append(CPPDEFINES=['LINUX'])
linux_env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME']=1

linux_env.Append(CCFLAGS=['-pipe', '-fPIC', '-Wall'])
linux_env.Append(CCFLAGS_DEBUG=['-g', '-O0'])

if base_env.Bit('x64'):
    linux_dbg_env = linux_env.Clone(
        BUILD_TYPE = 'dbg-x64',
        BUILD_TYPE_DESCRIPTION = 'Linux debug build - x64',
        BUILD_GROUPS = ['default'],
        tools = ['target_debug'])

    linux_rel_env = linux_env.Clone(
        BUILD_TYPE = 'rel-x64',
        BUILD_TYPE_DESCRIPTION = 'Linux optimized build - x64',
        BUILD_GROUPS = ['default'],
        tools = ['target_optimized'])
else:
    linux_dbg_env = linux_env.Clone(
        BUILD_TYPE = 'dbg-x86',
        BUILD_TYPE_DESCRIPTION = 'Linux debug build - x86',
        BUILD_GROUPS = ['default'],
        tools = ['target_debug'])

    linux_rel_env = linux_env.Clone(
        BUILD_TYPE = 'rel-x86',
        BUILD_TYPE_DESCRIPTION = 'Linux optimized build - x86',
        BUILD_GROUPS = ['default'],
        tools = ['target_optimized'])

# WIN32
windows_env = base_env.Clone(
    tools        = ['target_platform_windows'],
    MSVC_VERSION = '10.0',
    # If called from VS makefile project, vcvars are already set. Save ~150ms.
    # We could save another 150ms by explicitly setting CC and AR here, but that's
    # harder to do cleanly as paths may different per machine.
    MSVC_USE_SCRIPT = not 'VISUALSTUDIOVERSION' in os.environ,
    MANIFEST_TILE = None)
windows_env.Append(CPPDEFINES=['_CRT_SECURE_NO_WARNINGS',
                               '_BIND_TO_CURRENT_VCLIBS_VERSION'])

windows_env.Append(LINKFLAGS=['/INCREMENTAL:NO'])
windows_env.Append(CPPDEFINES=['WIN32_LEAN_AND_MEAN', 'NONAMELESSUNION'])
# Not everyone wants to build with libcmt
windows_env.FilterOut(CCFLAGS_DEBUG=['/MTd'])
windows_env.Append(CCFLAGS_DEBUG=['/MDd'])
windows_env.FilterOut(CCFLAGS_OPTIMIZED=['/MT'])
windows_env.Append(CCFLAGS_OPTIMIZED=['/MD'])
windows_env.FilterOut(CCFLAGS=['/W3'])
windows_env.FilterOut(CCFLAGS_DEBUG=['/W3'])
windows_env.FilterOut(CCFLAGS_OPTIMIZED=['/W3'])
windows_env.Append(CCFLAGS_DEBUG=['/W4'])
windows_env.Append(CCFLAGS_OPTIMIZED=['/W4'])


# generate dbg and rel envs
if base_env.Bit('x64'):
    windows_dbg_env = windows_env.Clone(
        BUILD_TYPE             = 'dbg-x64',
        BUILD_TYPE_DESCRIPTION = 'Windows debug build - x64',
        BUILD_GROUPS           = ['default'],
        tools                  = ['target_debug'])
    windows_rel_env = windows_env.Clone(
        BUILD_TYPE             = 'rel-x64',
        BUILD_TYPE_DESCRIPTION = 'Windows release build - x64',
        BUILD_GROUPS           = ['default'],
        tools                  = ['target_optimized'])
else:
    windows_dbg_env = windows_env.Clone(
        BUILD_TYPE             = 'dbg-x86',
        BUILD_TYPE_DESCRIPTION = 'Windows debug build - x86',
        BUILD_GROUPS           = ['default'],
        tools                  = ['target_debug'])
    windows_rel_env = windows_env.Clone(
        BUILD_TYPE             = 'rel-x86',
        BUILD_TYPE_DESCRIPTION = 'Windows release build - x86',
        BUILD_GROUPS           = ['default'],
        tools                  = ['target_optimized'])


# Add VLD memory leak detection options in debug build
DeclareBit('vld', 'Build with Visual Leak Detector')
base_env.SetBitFromOption('vld', False)

# VLD and code analysis are built separately from regular builds
if base_env.Bit('vld') :
    print 'Setting up Visual Leak Detector environment.\n'
    base_env.Dir('tools').addRepository(base_env.Dir('../tools'))
    vld_path = '$MAIN_DIR/tools/vld'
    vld_env = windows_dbg_env.Clone(
        BUILD_TYPE             = 'vld',
        BUILD_TYPE_DESCRIPTION = 'VLD enabled build')
    vld_env.Append(CPPDEFINES=['__VLD_MEM_DBG__'])
    vld_env.Append(CPPPATH = [os.path.join(vld_path, 'include')])
    vld_env.Append(BUILD_SCONSCRIPTS=['tests/memory_leak_test/build.scons'])
    if base_env.Bit('x64'):
        redist_files += Glob('tools/vld/bin/Win64/*')
        vld_env.Append(LIBPATH = [os.path.join(vld_path, 'lib/Win64')])
    else:
        redist_files += Glob('tools/vld/bin/Win32/*')
        vld_env.Append(LIBPATH = [os.path.join(vld_path, 'lib/Win32')])

    BuildEnvironments([vld_env])
    vld_env.Replicate('$STAGING_DIR', redist_files)

elif base_env.Bit('analysis'):
    analysis_env = windows_dbg_env.Clone(
        BUILD_TYPE             = 'analysis',
        BUILD_TYPE_DESCRIPTION = 'Code analysis build',
        MSVC_VERSION           = '14.0')
    analysis_env.Append(CCFLAGS=['/analyze'])
    BuildEnvironments([analysis_env])
else:
    for env in BuildEnvironments([windows_dbg_env, windows_rel_env,
                                  linux_dbg_env, linux_rel_env]):
        env.Replicate('$STAGING_DIR', redist_files)
